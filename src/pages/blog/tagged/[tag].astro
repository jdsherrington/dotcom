---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import BaseLayout from "@/layouts/BaseLayout.astro";
import BlogCard from "@/components/BlogCard.astro";

type BlogPost = CollectionEntry<"blog">;

import NavigationButton from "@/components/NavigationButton.astro";

export async function getStaticPaths() {
	const awaitPosts = await getCollection("blog");
	const posts = awaitPosts.sort(
		(a: BlogPost, b: BlogPost) =>
			new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
	);
	const uniqueTags = [
		...new Set(
			posts.map((post: { data: { tags: any } }) => post.data.tags).flat(),
		),
	];

	return uniqueTags.map((tag: any) => {
		const filteredPosts = posts.filter(
			(post: { data: { tags: string | any[] } }) =>
				post.data.tags.includes(tag),
		);
		const cleanedTag = tag.toLowerCase().replaceAll(" ", "-");
		return {
			params: { tag: cleanedTag },
			props: { posts: filteredPosts },
		};
	});
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout
	pageTitle=`JDS // ${tag.toLowerCase().replace(/\b(\s\w|^\w)/g, function (text: any) { return text.toUpperCase(); })} Posts`
	`
>
	<section
		class="w-col-full relative flex flex-col place-items-center place-self-center before:absolute before:inset-0 before:left-[0px] before:w-[calc(100%+0px)] before:h-gutter-2 before:content-[''] before:border-l before:border-r before:border-border-background"
	>
		<div id="tagged-controls"
			class="tag-controls border-border-background sticky top-[calc((var(--col-gutter)*2)-2px)] z-1 flex h-gutter-2 w-[calc(var(--col-full)-2px)] place-items-center border-b bg-[oklch(var(--background-primary)))] backdrop-blur-xl transition-all duration-0 ease-in-out"
		>
			<a href="javascript:void(0)" onclick="history.back()" class="h-full">
				<NavigationButton
					text="Back"
					class="arrow-left text-foreground/50 border-border-background md:hover:bg-accent-foreground/10 md:hover:text-accent-foreground relative h-full w-auto cursor-pointer rounded-sm border-r px-3 transition-colors duration-200 ease-in-out *:h-3.5"
				/>
			</a>

			<span
				class="card-tag border-border-background before:ease-flicker ease-flicker text-foreground/60 relative flex h-full place-items-center gap-1 border-r pr-3 pl-3.5 font-mono text-xs tracking-wide uppercase transition-colors duration-200 before:pointer-events-none before:absolute before:-top-[0px] before:-left-[1px] before:mt-[calc(var(--true-nav-opacity)*1px)] before:h-[calc(100%+1px+(0px-(var(--true-nav-opacity)*1px)))] before:w-[calc(100%+2px)] before:border before:border-transparent before:transition-colors before:duration-200 before:content-[''] sm:py-2 md:py-1.5 has-[.tag-close-link:hover]:md:bg-red-400/10 has-[.tag-close-link:hover]:md:text-red-300 has-[.tag-close-link:hover]:md:before:border-red-400"
				>{tag.replaceAll("-", " ")}<a
					href="/blog"
					class="tag-close-link ease-flicker pointer-events-auto stroke-red-400 transition-colors duration-200 select-auto hover:md:stroke-red-300"
					><svg
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 24 24"
						stroke-width="2"
						stroke-linecap="round"
						stroke-linejoin="round"
						class="tag-close-button h-auto w-5"
					>
						<path d="M 18 6 L 6 18 M 6 6 L 18 18"></path>
					</svg></a
				>
			</span>
		</div>

		<div
			id="tagged-blog-posts"
			class="w-col-full sm:grid-cols-1fr grid grid-flow-row mb-60 md:grid-cols-2 lg:grid-cols-3 border-l border-border-background"
		>
			{
				posts.map((post: BlogPost) => (
					<BlogCard
						id={post.id}
						title={post.data.title}
						description={post.data.description}
						date={post.data.date}
						url={`/blog/${post.id}`}
						tags={post.data.tags}
						imagePath={post.data.imagePath}
						imageAlt={post.data.imageAlt}
						wordCount={post.data.wordCount}
						type="standard"
					/>
				))
			}
		</div>
	</section>
</BaseLayout>
