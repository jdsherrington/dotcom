---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

interface Props {
	title: string;
	description: string;
	date: string;
	url: string;
	tags: string[];
	imagePath: string;
	imageAlt: string;
	accentColor: string;
}

const { title, description, date, url, tags, imagePath, imageAlt, accentColor } =
	Astro.props;

const formattedDate = new Date(Astro.props.date).toLocaleDateString("en-US", {
    year: "numeric",
	month: "long",
	day: "2-digit",
});

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/blog/posts/*.{jpeg,jpg,png,gif,webp}"
);

if (!images[imagePath])
	throw new Error(
		`"${imagePath}" does not exist in glob: "src/assets/blog/posts/*"`
	);
---

    <div transition:name=`container-${url}`
		class="blog-post featured-blog-post"
		data-accent={accentColor}
	>
        <a href={url}>
            <div class="featured-post-img" data-loaded="false">
                <Image
                    transition:name=`image-${url}`
                    src={images[imagePath]()}
                    alt={imageAlt}
                    onload="this.parentElement.dataset.loaded = 'true'"
                />
            </div>
        </a>
		<div
			class="featured-post-accent"
			data-accent={accentColor}
		></div>
		<div
			class="featured-post-content">
            <p class="blog-post-featured">FEATURED POST</p>
            <a href={url} class="featured-post-title">
				<h1 transition:name=`title-${url}`
				>
					{title}
				</h1>
            </a>
            <p transition:name=`date-${url}` class="blog-post-date">
				{formattedDate}
			</p>
			<p transition:name=`description-${url}`
				class="featured-post-description"
			>
				{description}
			</p>
			<div transition:name=`tags-${url}` class="featured-post-tags">
                {
                    tags?.map((tag: any, index: number) => (
                        <a href=`/blog/tagged/${tag.toLowerCase()}`
                            class:list={[
                                tag.toLowerCase().replaceAll(" ", "-"),
                                "blog-post-tag",
                            ]}
                        >
                            {tag}
                        </a>
                    ))
                }
        </div>
        <a href={url} class="blog-post-arrow-link">
                <svg class="blog-post-arrow" viewBox="0 0 492 492">
                    <g>
                        <g>
                            <path d="M484.14,226.886L306.46,49.202c-5.072-5.072-11.832-7.856-19.04-7.856c-7.216,0-13.972,2.788-19.044,7.856l-16.132,16.136
                            c-5.068,5.064-7.86,11.828-7.86,19.04c0,7.208,2.792,14.2,7.86,19.264L355.9,207.526H26.58C11.732,207.526,0,219.15,0,234.002
                            v22.812c0,14.852,11.732,27.648,26.58,27.648h330.496L252.248,388.926c-5.068,5.072-7.86,11.652-7.86,18.864
                            c0,7.204,2.792,13.88,7.86,18.948l16.132,16.084c5.072,5.072,11.828,7.836,19.044,7.836c7.208,0,13.968-2.8,19.04-7.872
                            l177.68-177.68c5.084-5.088,7.88-11.88,7.86-19.1C492.02,238.762,489.228,231.966,484.14,226.886z"></path>
                        </g>
                    </g>
                </svg>
            </a>
		</div>
	</div>

<script>
	const handleOnMouseMove = (e) => {
		const { currentTarget: target } = e;

		const rect = target.getBoundingClientRect(),
			x = e.clientX - rect.left,
			y = e.clientY - rect.top;

		target.style.setProperty("--mouse-x", `${x}px`);
		target.style.setProperty("--mouse-y", `${y}px`);
	};

	const attachEventListeners = () => {
		for (const post of document.querySelectorAll(".blog-post")) {
			(post as HTMLElement).onmousemove = (e) => handleOnMouseMove(e);
		}

		const post = document.querySelector(
			".featured-post-accent"
		) as HTMLElement;
		post.style.background = `radial-gradient(circle 250px at 100% 325%, hsl(${post.dataset.accent}/0.5) 0%, transparent 300%)`;

		const postsBefore = document.querySelectorAll(
			".blog-post"
		) as NodeListOf<HTMLElement>;
		postsBefore.forEach(function (el) {
			el.style.setProperty(
				"--card-accent",
				`${el.dataset.accent as string}`
			);
		});
	};

	attachEventListeners();

	document.addEventListener("astro:after-swap", () => {
		attachEventListeners();
	});
</script>