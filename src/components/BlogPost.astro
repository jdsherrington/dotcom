---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

interface Props {
	title: string;
	description: string;
	date: string;
	url: string;
	tags: string[];
	imagePath: string;
	imageAlt: string;
	accentColor: string;
    wordCount: number;
    type: string;
}

const { title, description, date, url, tags, imagePath, imageAlt, accentColor, type } =
	Astro.props;

const formattedDate = new Date(Astro.props.date).toLocaleDateString("en-AU", {
	year: "numeric",
	month: "short",
	day: "2-digit",
});

const readTime = Math.round(Astro.props.wordCount / 250);

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/blog/posts/*.{jpeg,jpg,png,gif,webp}"
);

if (!images[imagePath])
	throw new Error(
		`"${imagePath}" does not exist in glob: "src/assets/blog/posts/*"`
	);
---

<div transition:name=`container-${url}`
class="blog-post card"
data-accent={accentColor}
data-type={type}>
    <a href={url}>
        <div transition:name=`image${url}` class="blog-post-img" data-loaded="false">  
            <Image
                transition:name=`image-${url}`
                src={images[imagePath]()} 
                alt={imageAlt}
                onload="this.parentElement.dataset.loaded = 'true'"
            />
        </div>
    </a>
    <div
        transition:name=`accent-${url}`
        class="card-accent"
        data-accent={accentColor}
    ></div>
    <div
        class="blog-post-content"
    >
        <p class="blog-post-featured">FEATURED POST</p>
    
        <a href={url} class="blog-post-title">
            <h1 transition:name=`title-${url}`>{title}</h1>
        </a>

        <p transition:name=`date-${url}` class="blog-post-date">{formattedDate} â€” {readTime} min read</p>

        <p transition:name=`description-${url}` class="blog-post-description">{description}</p>
        

        <div transition:name=`tags-${url}` class="blog-post-tags">
                {
                    tags?.map((tag: any, index: number) => (
                        <a href=`/blog/tagged/${tag.toLowerCase()}`
                            class:list={[
                                tag.toLowerCase().replaceAll(" ", "-"),
                                "blog-post-tag",
                            ]}
                        >
                            {tag}
                        </a>
                    ))
                }
        </div>
        <a href={url} class="blog-post-arrow-link">
                <svg class="blog-post-arrow" viewBox="0 0 492 492">
                    <g>
                        <path d="M484.14,226.886L306.46,49.202c-5.072-5.072-11.832-7.856-19.04-7.856c-7.216,0-13.972,2.788-19.044,7.856l-16.132,16.136
                        c-5.068,5.064-7.86,11.828-7.86,19.04c0,7.208,2.792,14.2,7.86,19.264L355.9,207.526H26.58C11.732,207.526,0,219.15,0,234.002
                        v22.812c0,14.852,11.732,27.648,26.58,27.648h330.496L252.248,388.926c-5.068,5.072-7.86,11.652-7.86,18.864
                        c0,7.204,2.792,13.88,7.86,18.948l16.132,16.084c5.072,5.072,11.828,7.836,19.044,7.836c7.208,0,13.968-2.8,19.04-7.872
                        l177.68-177.68c5.084-5.088,7.88-11.88,7.86-19.1C492.02,238.762,489.228,231.966,484.14,226.886z"></path>
                    </g>
                </svg>
            </a>
    </div>
</div>


<script>
    const handleOnMouseMove = (e: MouseEvent) => {
    const target = e.currentTarget as HTMLElement;

    if (!target) return;

    const rect = target.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    target.style.setProperty("--mouse-x", `${x}px`);
    target.style.setProperty("--mouse-y", `${y}px`);
};

const attachEventListeners = () => {
    // Add mousemove event listeners to blog posts
    document.querySelectorAll<HTMLElement>(".blog-post").forEach((post) => {
        post.onmousemove = (e) => handleOnMouseMove(e);
    });

    // // Style blog-post accents
    // const accentPosts = document.querySelectorAll<HTMLElement>(".blog-post-accent");
    // accentPosts.forEach((el) => {
    //     const accent = el.dataset.accent;
    //     if (accent) {
    //         el.style.background = `radial-gradient(circle at 0% 30%, oklch(${accent}) -350%, transparent 70%)`;
    //     }
    // });

    // Style featured post accent
    const featuredCard = document.querySelector<HTMLElement>(".card[data-type='featured']");
    if (featuredCard) {
        featuredCard.classList.add("card-alt");
        featuredCard.classList.remove("card");
    }

    const featuredAccent = document.querySelector<HTMLElement>(".blog-post[data-type='featured'] .card-accent");
    if (featuredAccent) {
        featuredAccent.classList.add("card-accent-alt");
        featuredAccent.classList.remove("card-accent");
    }

    // Set post accents
    document.querySelectorAll<HTMLElement>(".blog-post").forEach((el) => {
        const accent = el.dataset.accent;
        if (accent) {
            el.style.setProperty("--accent", `${accent}`);
        }
    });
};

// Attach initial event listeners
attachEventListeners();

document.addEventListener("astro:page-load", () => {
    attachEventListeners();
});

document.addEventListener("astro:after-swap", () => {
    attachEventListeners();
});
</script>
