---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

interface Props {
	title: string;
	desc: string;
	date: string;
	url: string;
	tags: string[];
	imagePath: string;
	imageAlt: string;
	accentColor: string;
}

const { title, desc, date, url, tags, imagePath, imageAlt, accentColor } =
	Astro.props;

const formattedDate = new Date(Astro.props.date).toLocaleDateString("en-US", {
	year: "numeric",
	month: "long",
	day: "numeric",
});

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/blog/posts/*.{jpeg,jpg,png,gif,webp}"
);

if (!images[imagePath])
	throw new Error(
		`"${imagePath}" does not exist in glob: "src/assets/blog/posts/*"`
	);
---


	<div transition:name=`post-data-${desc}`
		class="post relative grid sm:grid-cols-[var(--one-w)_var(--three-w)] md:grid-cols-[var(--three-w)_var(--five-w)] lg:grid-cols-[var(--two-w)_var(--half-w)] gap-[var(--guide-gutter)] place-content-start rounded-[var(--radius)] border-transparent border-[1px] hover:border-[var(--post-accent-border)] shadow-l shadow-transparent hover:shadow-black/15 z-10 bg-foreground/5 h-auto"
		data-accent={accentColor}
	>
		<Image
            transition:name=`media-image-${imagePath}`
			src={images[imagePath]()}
			alt={imageAlt}
			class="post-img w-full object-cover rounded-l-[var(--radius)] rounded-r-none"
		/>
		<div
			class="post-accent rounded-[var(--radius)] absolute bottom-0 left-0 w-full h-full"
			data-accent={accentColor}
		>
		</div>
		<div
			class="post-content grid grid-rows-[auto_auto_1fr_min-content] h-auto w-full align-items-start overflow-hidden rounded-[var(--radius)] pr-[var(--guide-gutter)]"
		><a href={url} class="post-link cursor-pointer w-min">
			<h1 transition:name=`post-data-${title}`
				class="post-preview-details w-auto text-xl font-bold tracking-tight pt-4 pr-4 place-content-start text-foreground/75 transition-all duration-300"
			>
				{title}
				<span></span>
			</h1>
            
			<p  transition:name=`post-data-${date}`
				class="post-preview-details w-auto small-caps pr-4 pb-2 place-content-start text-foreground/40"
			>
				{formattedDate}
			</p>
			<p
				class="post-preview-details w-auto text-xs pr-4 place-content-start whitespace-nowrap overflow-hidden text-ellipsis h-min"
			>
				{desc}
			</p>
            </a>
			<div class="post-preview-details flex flex-row">
				<div 
					class="flex w-full flex-wrap justify-start gap-1 align-self-end place-content-end pt-4 pb-4"
				>
					{
						tags?.map((tag: any) => (
							<a href=`/blog/tagged/${tag.toLowerCase().replaceAll(" ", " ")}`
								class:list={[
									tag.toLowerCase().replaceAll(" ", "-"),
									"post-tag bg-foreground/5 hover:bg-foreground/10 text-foreground/75 hover:text-foreground backdrop-blur-xl rounded-[250px] pl-2.5 pr-2.5 pt-0.5 pb-0.5 text-[0.75rem] whitespace-nowrap overflow-hidden place-self-end transition-all duration-300 cursor-pointer",
								]}
							>
								{tag}
							</a>
						))
					}
				</div>
                <a href={url} class="place-self-end mb-4 ml-4 cursor-pointer">
				<svg
					class="nav-arrow h-6 w-min fill-foreground/25"
					viewBox="0 0 492.004 492.004"
				>
					<g>
						<g>
							<path
								d="M484.14,226.886L306.46,49.202c-5.072-5.072-11.832-7.856-19.04-7.856c-7.216,0-13.972,2.788-19.044,7.856l-16.132,16.136
			                    c-5.068,5.064-7.86,11.828-7.86,19.04c0,7.208,2.792,14.2,7.86,19.264L355.9,207.526H26.58C11.732,207.526,0,219.15,0,234.002
			                    v22.812c0,14.852,11.732,27.648,26.58,27.648h330.496L252.248,388.926c-5.068,5.072-7.86,11.652-7.86,18.864
			                    c0,7.204,2.792,13.88,7.86,18.948l16.132,16.084c5.072,5.072,11.828,7.836,19.044,7.836c7.208,0,13.968-2.8,19.04-7.872
			                    l177.68-177.68c5.084-5.088,7.88-11.88,7.86-19.1C492.02,238.762,489.228,231.966,484.14,226.886z"
							></path>
						</g>
					</g>
				</svg>
                </a>
			</div>
		</div>
	</div>

<style define:vars={{ image: `url("${imagePath}")` }}>
	.post {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		position: relative;
		border-radius: var(--radius);
		--post-accent: white;
	}

	.post::before {
		border-radius: inherit;
		content: "";
		height: 100%;
		left: 0px;
		opacity: 0;
		position: absolute;
		top: 0px;
		transition: opacity 500ms;
		width: 100%;
		background: radial-gradient(
			600px circle at var(--mouse-x) var(--mouse-y),
			var(--post-accent-glow) 0%,
			transparent 35%
		);
		z-index: 1;
		pointer-events: none;
	}

	.post:hover::before {
		opacity: 1;
	}

	.nav-arrow {
		transition: fill ease-in-out 200ms;
	}

	.nav-arrow:hover {
		fill: var(--post-accent);
	}

    .post-link:hover h1 {
        color: hsl(var(--css-foreground));
    }

	.post-accent {
		pointer-events: none;
	}

	.post-img {
		pointer-events: none;
		object-position: 50% 50%;
		mask-image: linear-gradient(
			to top,
			rgba(0, 0, 0, 0) -10%,
			rgba(0, 0, 0, 1) 100%
		);
	}

	.post-content {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		z-index: 2;
		border-radius: calc(var(--radius) - 1px);
	}
</style>

<script>
	function getCombinedHeight(post: HTMLElement) {
		const postPreviewDetails = post.querySelectorAll(
			".post-preview-details"
		) as NodeListOf<HTMLElement>;
		let totalHeight = 0;
		postPreviewDetails.forEach((element) => {
			const style = window.getComputedStyle(element);
			const elementHeight = element.offsetHeight;
			const marginTop = parseFloat(style.marginTop);
			const marginBottom = parseFloat(style.marginBottom);
			totalHeight += elementHeight + marginTop + marginBottom;
		});

		return totalHeight;
	}

	function getCombinedHeights() {
		const allposts: NodeListOf<HTMLElement> =
			document.querySelectorAll(".post");
		allposts.forEach((post) => {
			const height = getCombinedHeight(post);
			const image = post.querySelector(".post-img") as HTMLElement;
			console.log(image);
			if (image) {
				image.style.height = `${height}px`;
			}
		});
	}

	const handleOnMouseMove = (e) => {
		const { currentTarget: target } = e;

		const rect = target.getBoundingClientRect(),
			x = e.clientX - rect.left,
			y = e.clientY - rect.top;

		target.style.setProperty("--mouse-x", `${x}px`);
		target.style.setProperty("--mouse-y", `${y}px`);
	};

	const attachEventListeners = () => {
		for (const post of document.querySelectorAll(".post")) {
			(post as HTMLElement).onmousemove = (e) => handleOnMouseMove(e);
		}

		const posts = document.querySelectorAll(
			".post-accent"
		) as NodeListOf<HTMLElement>;
		posts.forEach(function (el) {
			console.log(el.dataset.accent);
			el.style.background = `radial-gradient(circle 250px at 0% 250%, ${el.dataset.accent} -50%, transparent 150%)`;
		});

		const postsBefore = document.querySelectorAll(
			".post"
		) as NodeListOf<HTMLElement>;
		postsBefore.forEach(function (el) {
			console.log(el.dataset.accent);
			el.style.setProperty(
				"--post-accent",
				`${el.dataset.accent as string}`
			);
			el.style.setProperty(
				"--post-accent-border",
				`${el.dataset.accent as string}55`
			);
			el.style.setProperty(
				"--post-accent-glow",
				`${el.dataset.accent as string}22`
			);
		});

		getCombinedHeights();
	};

	attachEventListeners();

	document.addEventListener("astro:after-swap", () => {
		attachEventListeners();
	});

	window.addEventListener("resize", getCombinedHeights);
</script>
