---
import type { ImageMetadata } from "astro";
import { Icon } from "astro-icon/components";
import Image from "astro:assets";
/* import { extractOKLCHColors } from "../lib/extractOKLCHColors"; */
import CardTag from "./CardTag.astro";

interface Props {
	id: string;
	title: string;
	category: string;
	description: string;
	url: string;
	repo: string;
	tags: string[];
	iconPath: string;
	iconAlt: string;
}

const {
	id,
	title,
	category,
	description,
	url,
	repo,
	tags,
	iconPath,
	iconAlt,
} = Astro.props;

// const accentPalette: any = await extractOKLCHColors(imagePath);
// const accent = accentPalette[0];

// const images = import.meta.glob<{ default: ImageMetadata }>(
// 	"/src/assets/projects/images/*.{jpeg,jpg,png,gif,webp}",
// );
//
// if (!images[imagePath])
// 	throw new Error(
// 		`"${imagePath}" does not exist in glob: "src/assets/projects/images/*"`,
// 	);
---

<div
	id=`project-${id}`
	transition:name=`project-${id}`
	class="project-card card group gap-gutter flex border-b selection:bg-[oklch(var(--accent-foreground))] selection:text-[oklch(var(--accent-background))] sm:flex-row md:flex-col border-r md:mb-gutter"

>
	<div class="w-full flex flex-row">
	<a
		id=`project-image-${id}`
		href={url}
		transition:name=`project-image-${id}`
			class="border-border-background group/thumbnail ease-flicker md:h-col-2 z-1 flex h-auto flex-col items-center border border-l-transparent border-t-transparent transition-colors duration-300 sm:h-[calc(100%-(var(--col-gutter))*2)] sm:w-[calc(var(--col-1)+(var(--col-gutter)*2))] md:hover:border-[oklch(var(--accent-foreground))] md:w-full text-border-background hover:text-accent-foreground hover:bg-accent-foreground/5"
		data-loaded="false"
		data-id="${id}"
	>
		<Icon
			name={iconPath}
			alt={iconAlt}
			onload="this.parentElement.dataset.loaded = 'true'"
				class="w-30 max-w-3/4 py-4 h-full self-center "	
		/>

		<!-- <small -->
		<!-- 	class="text-border-foreground prevent-select border-border-background text-2xs ease-flicker pointer-events-none line-clamp-1 h-[calc(var(--col-gutter))] border-t px-2 py-1 text-right font-mono tracking-widest uppercase transition-all duration-200 sm:hidden md:block md:group-hover/thumbnail:border-[oklch(var(--accent-foreground))] md:group-hover/thumbnail:bg-[oklch(var(--accent-foreground)/0.1)] md:group-hover/thumbnail:text-[oklch(var(--accent-foreground))]" -->
		<!-- 	>// {imageAlt} -->
		<!-- </small> -->
		</a>
		<a href=`https://github.com/jdsherrington/${repo}` class="repo-link w-full z-1 border-b border-border-background  h-min p-2">
			<p class="font-mono uppercase text-2xs tracking-widest leading-4 transition-colors ease-flicker duration-300 text-border-background in-[.repo-link:hover]:text-border-foreground">
				jdsherrington<br>
				<span class="text-border-foreground in-[.repo-link:hover]:text-accent-foreground in-[.repo-link:hover]:font-semibold transition-colors ease-flicker duration-300">
					/{repo}
				</span>

			</p>
		</a>
	</div>
	<div
		id=`project-content-${id}`
		class="z-1 flex h-auto flex-grow flex-col transition-opacity duration-300 ease-in-out group-hover:opacity-100 sm:w-full sm:pl-0 sm:opacity-100 sm:pt-4 md:opacity-90 md:pt-0"
	>
		<a href={url} class="inline-block w-fit">
			<h1
				id=`project-title-${id}`
				transition:name=`project-title-${id}`
				class="px-gutter sm:text-foreground/80 md:text-foreground/70 md:hover:text-foreground/80 mb-1.5 leading-7 font-[650] tracking-tight text-pretty transition-colors duration-300 ease-in-out sm:text-xl md:text-2xl inline-block"
			>
				{title}
			</h1>
		</a>

		<small
			id=`project-date-${id}`
			transition:name=`project-date-${id}`
			class="px-gutter sm:text-foreground/60 md:text-foreground/50 mb-2 font-mono text-xs tracking-widest uppercase transition-all duration-300 ease-in-out"
		>
			// {category}
		</small>

		<p
			id=`project-description-${id}`
			transition:name=`project-description-${id}`
			class="px-gutter text-foreground/70 mb-4 h-auto text-sm text-pretty transition-all duration-300 ease-in-out sm:hidden md:line-clamp-3"
		>
			{description}
		</p>

		<div
			id=`project-tags-${id}`
			transition:name=`project-tags-${id}`
			class="px-gutter h-min tags-box grow-1 flex w-full flex-row flex-wrap place-content-start"
		>
			{tags?.map((tag: any) => <CardTag text={tag} collection="projects" />)}
		</div>
		<div
			id=`project-button-wrapper-${id}`
			class="group mt-gutter flex w-full"
		>
			<div
				id=`project-decoration-${id}`
				class="before:ease-flicker ease-flicker border-border-background relative grow-1 border border-r-0 bg-[repeating-linear-gradient(90deg,var(--border-background),var(--border-background)_1px,transparent_1px,transparent_5px)] bg-clip-content transition-all duration-200 before:absolute before:inset-0 before:bg-[repeating-linear-gradient(90deg,oklch(var(--accent-foreground)),oklch(var(--accent-foreground))_1px,transparent_1px,transparent_5px)] before:opacity-0 before:transition-all before:delay-100 before:duration-200 before:content-[''] group-has-[.navigation-button:hover]:md:border-[oklch(var(--accent-foreground))] group-has-[.navigation-button:hover]:md:before:opacity-100"
			>
			</div>
			<a
				href={url}
				id=`project-button-live-${id}`
				transition:name=`project-button-live-${id}`
				class="navigation-button rounded-base border-border-background text-foreground/60 ease-flicker relative inline-flex w-fit cursor-pointer place-items-center gap-3 place-self-end border px-4.5 py-3 font-mono text-xs tracking-wider uppercase transition-all duration-200 hover:md:border-[oklch(var(--accent-foreground))] hover:md:bg-[oklch(var(--accent-foreground)/0.1)] hover:md:text-[oklch(var(--accent-foreground))]"
			>
				<span class="">Live</span>
				<Icon name="ui/open-arrow" class="h-3 w-auto" />
			</a>
			<a
				href={url}
				id=`project-button-more-${id}`
				transition:name=`project-button-more-${id}`
				class="navigation-button rounded-base border-border-background text-foreground/60 ease-flicker relative inline-flex w-fit cursor-pointer place-items-center gap-3 place-self-end border px-4.5 py-3 font-mono text-xs tracking-wider uppercase transition-all duration-200 hover:md:border-[oklch(var(--accent-foreground))] hover:md:bg-[oklch(var(--accent-foreground)/0.1)] hover:md:text-[oklch(var(--accent-foreground))]"
			>
				<span class="">Read More</span>
				<Icon name="ui/right-arrow" class="h-3 w-auto" />
			</a>
		</div>
	</div>
</div>

<!-- <div -->
<!-- 	transition:name=`project-card-${id}` -->
<!-- 	class="project-card card" -->
<!-- 	data-accent={accent} -->
<!-- > -->
<!-- 	<a href={url}> -->
<!-- 		<div class="project-card-img"> -->
<!-- 			<div class="project-card-icon"> -->
<!-- 				<Icon name=`${iconPath}` class="logo" /> -->
<!-- 			</div> -->
<!-- 		</div> -->
<!-- 	</a> -->
<!---->
<!-- 	<div -->
<!-- 		transition:name=`project-accent-${id}` -->
<!-- 		class="project-card-accent card-accent" -->
<!-- 		data-accent={accent} -->
<!-- 	> -->
<!-- 	</div> -->
<!---->
<!-- 	<div class="project-card-content"> -->
<!-- 		<a href={url} class="project-card-title"> -->
<!-- 			<h1 transition:name=`project-title-${id}`>{title}</h1> -->
<!-- 		</a> -->
<!---->
<!-- 		<p -->
<!-- 			transition:name=`project-category-${id}` -->
<!-- 			class="project-card-category" -->
<!-- 		> -->
<!-- 			{category} -->
<!-- 		</p> -->
<!---->
<!-- 		<p -->
<!-- 			transition:name=`project-description-${id}` -->
<!-- 			class="project-card-description" -->
<!-- 		> -->
<!-- 			{description} -->
<!-- 		</p> -->
<!---->
<!-- 		<div transition:name=`project-tags-${id}` class="project-card-tags"> -->
<!-- 			{ -->
<!-- 				tags?.map((tag: any) => ( -->
<!-- 					<CardTag text={tag} collection="projects" /> -->
<!-- 				)) -->
<!-- 			} -->
<!-- 		</div> -->
<!-- 		<a href={url} class="project-card-arrow-link"> -->
<!-- 			<svg class="project-card-arrow" viewBox="0 0 492 492"> -->
<!-- 				<g> -->
<!-- 					<path -->
<!-- 						d="M484.14,226.886L306.46,49.202c-5.072-5.072-11.832-7.856-19.04-7.856c-7.216,0-13.972,2.788-19.044,7.856l-16.132,16.136 -->
<!--                         c-5.068,5.064-7.86,11.828-7.86,19.04c0,7.208,2.792,14.2,7.86,19.264L355.9,207.526H26.58C11.732,207.526,0,219.15,0,234.002 -->
<!--                         v22.812c0,14.852,11.732,27.648,26.58,27.648h330.496L252.248,388.926c-5.068,5.072-7.86,11.652-7.86,18.864 -->
<!--                         c0,7.204,2.792,13.88,7.86,18.948l16.132,16.084c5.072,5.072,11.828,7.836,19.044,7.836c7.208,0,13.968-2.8,19.04-7.872 -->
<!--                         l177.68-177.68c5.084-5.088,7.88-11.88,7.86-19.1C492.02,238.762,489.228,231.966,484.14,226.886z" -->
<!-- 					></path> -->
<!-- 				</g> -->
<!-- 			</svg> -->
<!-- 		</a> -->
<!-- 	</div> -->
<!-- </div> -->

<script>
const setProjectAccents = () => {
		// Set project accents
		document.querySelectorAll<HTMLElement>(".project-card").forEach((project) => {
			const currentTheme =
				document.documentElement.getAttribute("data-theme");
			project.style.setProperty("--accent-local", `${project.dataset.accent}`);

			if (currentTheme === "dark" || currentTheme === "light") {
				project.style.setProperty(
					"--accent",
					getComputedStyle(project).getPropertyValue("--accent-local"),
				);
			} else {
				project.style.setProperty(
					"--accent",
					getComputedStyle(document.documentElement).getPropertyValue(
						"--accent-global",
					),
				);
			}
		});
	};

	// Attach initial event listeners
	setProjectAccents();
	document.addEventListener("astro:after-swap", () => {
		setProjectAccents();
});

	const setTagRows = () => {
		const tagBoxes = document.querySelectorAll(".tags-box");

		if (!tagBoxes) {
			return;
		}
		// First check applies relevant flex row classes
		tagBoxes.forEach((tagBox) => {
			const tags = tagBox.querySelectorAll(".card-tag");

			// Reset previous row classes
			tags.forEach((tag) => {
				for (let i = 0; i < 10; i++) {
					tag.classList.remove(`tag-row-${i + 1}`);
				}
			});

			if (tags.length === 0) return;

			let prevTop = tags[0].getBoundingClientRect().top;
			let currentRow = 1;

			tags.forEach((tag) => {
				const tagTop = tag.getBoundingClientRect().top;

				if (Math.abs(tagTop - prevTop) > 1) {
					currentRow++;
					prevTop = tagTop;
				}

				tag.classList.add(`tag-row-${currentRow}`);
			});
		});

		tagBoxes.forEach((tagBox: any) => {
			const tags: NodeListOf<HTMLElement> =
				tagBox.querySelectorAll(".card-tag");
			if (tags.length === 0) return;

			let rowLengths: number[] = new Array(10).fill(0);

			for (let i = 0; i < 10; i++) {
				tags.forEach((tag: HTMLElement) => {
					if (tag.classList.contains(`tag-row-${i + 1}`)) {
						rowLengths[i] += tag.clientWidth;
					}
				});
			}

			rowLengths.forEach((rowLength: number, index) => {
				const rowTags = tagBox.querySelectorAll(
					`.tag-row-${index + 1}`,
				);

				// Cancels loop if current row is empty, offsets margins on previous row
				if (rowLengths[index] === 0) {
					return;
				}

				// Clears border classes, add hover margin offsets
				rowTags.forEach((tag: any) => {
					tag.classList.remove("border-l");
					tag.classList.remove("border-r");
					tag.classList.remove("border-b");
					tag.classList.remove("border-t");

					// tag.classList.add("md:hover:-mb-[1px]");
					// tag.classList.add("md:hover:-mr-[1px]");
					// tag.classList.add("md:hover:-mt-[1px]");
				});

				// Sets left borders on all tags in row, and right border on the last row tag
				rowTags.forEach(
					(tag: any, i: number, arr: NodeListOf<HTMLElement>) => {
						tag.classList.add("border-l");
						if (i === arr.length - 1) {
							tag.classList.add("border-r");
							tag.classList.remove("md:hover:-mr-[1px]");
						}
					},
				);

				// Sets top border on first row
				if (index == 0) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-t");
					});
				}

				// Sets bottom border if current row is longer than next row
				if (rowLengths[index] >= rowLengths[index + 1]) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-b");
						tag.classList.remove("md:hover:-mb-[1px]");
					});
				}

				// Sets top border if current row is longer than previous row
				if (rowLengths[index] > rowLengths[index - 1]) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-t");
						tag.classList.remove("md:hover:-mt-[1px]");
					});
				}

				// Sets bottom border if current row is final row
				if (rowLengths[index + 1] === 0) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-b");
						tag.classList.remove("md:hover:-mb-[1px]");
					});
				}
			});
		});
	};

	setTagRows();
	document.addEventListener("astro:after-swap", () => {
		setTagRows();
	});
	window.addEventListener("resize", () => {
		setTagRows();
	});

	const attachEventListeners = () => {
		for (const post of document.querySelectorAll(".project-card")) {
			(post as HTMLElement).onmousemove = (e) => handleOnMouseMove(e);
		}

		const projects = document.querySelectorAll(
			".project-card",
		) as NodeListOf<HTMLElement>;

		projects.forEach(function (card, index) {
			const icon = card.querySelector(
				".project-card-icon [data-icon]",
			) as HTMLElement;
			const projectTags = card.querySelectorAll(
				".project-card-tag",
			) as NodeListOf<HTMLElement>;
			projectTags.forEach(function (tag) {
				const tagColor = getComputedStyle(tag)
					.getPropertyValue("--tag-color")
					.trim();

				tag.addEventListener("mouseenter", () => {
					card.style.setProperty("--accent", tagColor);
					icon.style.setProperty("--accent", tagColor);
				});
				tag.addEventListener("mouseleave", () => {
					card.style.setProperty("--accent", "var(--foreground)");
					icon.style.setProperty("--accent", "var(--foreground)");
				});
			});
		});
	};

	attachEventListeners();

	document.addEventListener("astro:after-swap", () => {
		attachEventListeners();
	});
	

	// document.addEventListener("resize", setCardHeight);
</script>

<!-- <div transition:name=`container-${url}`
		class="project-card"
		data-accent={accentColor}
	>
        <a href={url}>
            <div class="project-card-img" data-loaded="false">
                <Image transition:name=`image-${url}`
                src={projectImages[imagePath]()}
                alt={imageAlt}
                onload="this.parentElement.dataset.loaded = 'true'"
                />
            </div>
        </a>
		<div
            transition:name=`accent-${url}`
			class="project-accent rounded-[var(--radius)] absolute bottom-0 left-0 w-full h-full sm:opacity-50 md:opacity-100"
			data-accent={accentColor}
		>
		</div>
		<div
			class="post-content flex flex-col sm:h-auto md:h-full sm:w-full md:w-auto align-items-start overflow-hidden rounded-[var(--radius)] sm:pr-[var(--guide-gutter)] md:px-[var(--guide-gutter)]"
		><a href={url} class="cursor-pointer h-full flex flex-col grow">
			<h1 transition:name=`title-${url}`
				class="post-sizing w-auto sm:text-xl md:text-2xl font-bold sm:leading-[1.1] tracking-tight sm:pt-[var(--guide-gutter)] md:pt-0 sm:pb-1 md:pb-0 place-content-start text-foreground/90 transition-colors duration-300"
			>
				{title}
			</h1>
            <p  transition:name=`category-${url}`
				class="post-sizing w-auto font-semibold text-xs uppercase tracking-widest pb-2 place-content-start text-[var(--project-accent)]"
			>
				{category}
			</p>
			<p transition:name=`description-${url}`
				class="post-sizing w-auto text-xs place-content-start leading-normal text-foreground/90 pb-[var(--guide-gutter)] md:grow"
			>
				{description}
			</p>
            </a>
			<div class="post-sizing flex flex-row pb-[calc(var(--guide-gutter)*0.75)]">
				<div transition:name=`tags-${url}`
					class="flex w-full flex-wrap justify-start gap-1 align-self-end place-content-end"
				>
					{
						tags?.map((tag: any) => (
							<a href=`/projects/${tag.toLowerCase().replaceAll(" ", " ")}`
								class:list={[
									tag.toLowerCase().replaceAll(" ", "-"),
									"card-tag",
								]}
							>
								{tag}
							</a>
						))
					}
				</div>
                <a href={url} class="place-self-end ml-[var(--guide-gutter)] cursor-pointer">
				<svg
					class="nav-arrow h-6 w-min fill-foreground/25"
					viewBox="0 0 492.004 492.004"
				>
					<g>
						<g>
							<path
								d="M484.14,226.886L306.46,49.202c-5.072-5.072-11.832-7.856-19.04-7.856c-7.216,0-13.972,2.788-19.044,7.856l-16.132,16.136
			                    c-5.068,5.064-7.86,11.828-7.86,19.04c0,7.208,2.792,14.2,7.86,19.264L355.9,207.526H26.58C11.732,207.526,0,219.15,0,234.002
			                    v22.812c0,14.852,11.732,27.648,26.58,27.648h330.496L252.248,388.926c-5.068,5.072-7.86,11.652-7.86,18.864
			                    c0,7.204,2.792,13.88,7.86,18.948l16.132,16.084c5.072,5.072,11.828,7.836,19.044,7.836c7.208,0,13.968-2.8,19.04-7.872
			                    l177.68-177.68c5.084-5.088,7.88-11.88,7.86-19.1C492.02,238.762,489.228,231.966,484.14,226.886z"
							></path>
						</g>
					</g>
				</svg>
                </a>
			</div>
		</div>
	</div>

<style define:vars={{ image: `url("${imagePath}")` }}>
	.post {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		position: relative;
		border-radius: var(--radius);
		--project-accent: white;
	}

	.post::before {
		border-radius: inherit;
		content: "";
		height: 100%;
		left: 0px;
		opacity: 0;
		position: absolute;
		top: 0px;
		transition: opacity 500ms;
		width: 100%;
		background: radial-gradient(
			600px circle at var(--mouse-x) var(--mouse-y),
			var(--project-accent-glow) 0%,
			transparent 35%
		);
		z-index: 1;
		pointer-events: none;
	}

	.post:hover::before {
		opacity: 1;
	}

	.nav-arrow {
		transition: fill ease-in-out 200ms;
	}

	.nav-arrow:hover {
		fill: var(--project-accent);
	}

    .post-link:hover h1 {
        color: oklch(var(--css-foreground));
    }

	.project-accent {
		pointer-events: none;
	}

	.post-img {
		pointer-events: none;
		
	}

	.post-content {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		z-index: 2;
		border-radius: calc(var(--radius) - 1px);
	}

    
</style>

<script>
	function getCombinedHeight(post: HTMLElement) {
		const postSizing = post.querySelectorAll(
			".post-sizing"
		) as NodeListOf<HTMLElement>;
		let totalHeight = 0;
		postSizing.forEach((element) => {
			const style = window.getComputedStyle(element);
			const elementHeight = element.offsetHeight;
			const marginTop = parseFloat(style.marginTop);
			const marginBottom = parseFloat(style.marginBottom);
			totalHeight += elementHeight + marginTop + marginBottom;
		});

		return totalHeight;
	}

	function getCombinedHeights() {
		const allposts: NodeListOf<HTMLElement> =
			document.querySelectorAll(".post");
		allposts.forEach((post) => {
			const height = getCombinedHeight(post);
			const image = post.querySelector(".post-img") as HTMLElement;
			console.log(image);
			if (image) {
				image.style.height = `${height}px`;
			}
		});
	}

	const handleOnMouseMove = (e) => {
		const { currentTarget: target } = e;

		const rect = target.getBoundingClientRect(),
			x = e.clientX - rect.left,
			y = e.clientY - rect.top;

		target.style.setProperty("--mouse-x", `${x}px`);
		target.style.setProperty("--mouse-y", `${y}px`);
	};

	const attachEventListeners = () => {
		for (const post of document.querySelectorAll(".post")) {
			(post as HTMLElement).onmousemove = (e) => handleOnMouseMove(e);
		}

		const posts = document.querySelectorAll(
			".project-accent"
		) as NodeListOf<HTMLElement>;
		posts.forEach(function (el) {
			console.log(el.dataset.accent);
			el.style.background = `radial-gradient(circle 250px at -50% -50%, ${el.dataset.accent} -50%, transparent 200%)`;
		});

		const postsBefore = document.querySelectorAll(
			".post"
		) as NodeListOf<HTMLElement>;
		postsBefore.forEach(function (el) {
			console.log(el.dataset.accent);
			el.style.setProperty(
				"--project-accent",
				`${el.dataset.accent as string}`
			);
			el.style.setProperty(
				"--project-accent-border",
				`${el.dataset.accent as string}55`
			);
			el.style.setProperty(
				"--project-accent-glow",
				`${el.dataset.accent as string}22`
			);
		});

		getCombinedHeights();
	};

	attachEventListeners();

	document.addEventListener("astro:after-swap", () => {
		attachEventListeners();
	});

	window.addEventListener("resize", getCombinedHeights);
</script> -->
