---
import type { ImageMetadata } from "astro";
import { Icon } from "astro-icon/components";
import Image from "astro:assets";

interface Props {
    id: number;
	title: string;
    category: string;
	description: string;
	url: string;
	tags: string[];
    iconPath: string;
	imagePath: string;
	imageAlt: string;
	accentColor: string;
}

const { id, title, category, description, url, tags, iconPath, imagePath, imageAlt, accentColor } =
	Astro.props;

const projectImages = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/projects/images/*.{jpeg,jpg,png,gif,webp}"
);

if (!projectImages[imagePath])
	throw new Error(
		`"${imagePath}" does not exist in glob: "src/assets/projects/images/*"`
	);

---

<div transition:name=`project-card-${id}` class="project-card card" data-accent={accentColor}>

    <a href={url}>
        <div class="project-card-img"> 
            
            <div class="project-card-icon">
                <Icon name=`${url.slice(1)}` class="logo"/>
            </div>
                <!-- <Image
                transition:name=`image-${url}`
                src={projectImages[imagePath]()} 
                alt={imageAlt}
                onload="this.parentElement.dataset.loaded = 'true'"
            /> -->
        </div>
    </a>

    <div
        transition:name=`project-accent-${id}`
        class="project-card-accent card-accent"
        data-accent={accentColor}
    >
    </div>

    <div
        class="project-card-content"
    >
        <a href={url} class="project-card-title">
            <h1 transition:name=`project-title-${id}`>{title}</h1>
        </a>
        
        <p transition:name=`project-category-${id}` class="project-card-category">{category}</p>
        
        <p transition:name=`project-description-${id}` class="project-card-description">
            {description}
        </p>

        <div transition:name=`project-tags-${id}` class="project-card-tags">
                {
                    tags?.map((tag: any, index: number) => (
                        <a href=`/projects/tagged/${tag.toLowerCase()}`
                            class:list={[
                                tag.toLowerCase().replaceAll(" ", "-"),
                                "project-card-tag",
                            ]}
                        >
                            {tag}
                        </a>
                    ))
                }
        </div>
        <a href={url} class="project-card-arrow-link">
                <svg class="project-card-arrow" viewBox="0 0 492 492">
                    <g>
                        <path d="M484.14,226.886L306.46,49.202c-5.072-5.072-11.832-7.856-19.04-7.856c-7.216,0-13.972,2.788-19.044,7.856l-16.132,16.136
                        c-5.068,5.064-7.86,11.828-7.86,19.04c0,7.208,2.792,14.2,7.86,19.264L355.9,207.526H26.58C11.732,207.526,0,219.15,0,234.002
                        v22.812c0,14.852,11.732,27.648,26.58,27.648h330.496L252.248,388.926c-5.068,5.072-7.86,11.652-7.86,18.864
                        c0,7.204,2.792,13.88,7.86,18.948l16.132,16.084c5.072,5.072,11.828,7.836,19.044,7.836c7.208,0,13.968-2.8,19.04-7.872
                        l177.68-177.68c5.084-5.088,7.88-11.88,7.86-19.1C492.02,238.762,489.228,231.966,484.14,226.886z"></path>
                    </g>
                </svg>
            </a>
    </div>
</div>


<script>
	const handleOnMouseMove = (e) => {
		const { currentTarget: target } = e;

		const rect = target.getBoundingClientRect(),
			x = e.clientX - rect.left,
			y = e.clientY - rect.top;

		target.style.setProperty("--mouse-x", `${x}px`);
		target.style.setProperty("--mouse-y", `${y}px`);
	};

	const attachEventListeners = () => {
		for (const post of document.querySelectorAll(".project-card")) {
			(post as HTMLElement).onmousemove = (e) => handleOnMouseMove(e);
		}

		const projects = document.querySelectorAll(
			".project-card"
		) as NodeListOf<HTMLElement>;
		
        projects.forEach(function (card, index) {
            const icon = card.querySelector(".project-card-icon [data-icon]") as HTMLElement;
            const projectTags = card.querySelectorAll(
            ".project-card-tag"
            ) as NodeListOf<HTMLElement>;
            projectTags.forEach(function (tag) {
                const tagColor = getComputedStyle(tag).getPropertyValue('--tag-color').trim();
                
                tag.addEventListener('mouseenter', () => {
                    card.style.setProperty('--accent', tagColor);
                    icon.style.setProperty('--accent', tagColor);
                });
                tag.addEventListener('mouseleave', () => {
                    card.style.setProperty('--accent', 'var(--foreground)');
                    icon.style.setProperty('--accent', 'var(--foreground)');
                    
                });
                
            });
        });

		// const postsBefore = document.querySelectorAll(
		// 	".project-card"
		// ) as NodeListOf<HTMLElement>;
		// postsBefore.forEach(function (el) {
		// 	el.style.setProperty(
		// 		"--project-accent",
		// 		`${el.dataset.accent as string}`
        //         // 100%
		// 	);
		// 	el.style.setProperty(
		// 		"--project-accent-border",
		// 		`${el.dataset.accent as string}4D`
        //         // 40%
		// 	);
		// 	el.style.setProperty(
		// 		"--project-accent-glow",
		// 		`${el.dataset.accent as string}33`
        //         // 20%
		// 	);
		// });

        // setCardHeight();

	};

    // const child = document.querySelector('.child');
    // const parent = document.querySelector('.parent');

    // child.addEventListener('mouseenter', () => {
    //     parent.style.setProperty('--your-variable', 'new-value');
    // });

    // child.addEventListener('mouseleave', () => {
    //     parent.style.setProperty('--your-variable', 'original-value');
    // });

	attachEventListeners();

	document.addEventListener("astro:after-swap", () => {
		attachEventListeners();
	});

    // document.addEventListener("resize", setCardHeight);
</script>

	<!-- <div transition:name=`container-${url}`
		class="project-card"
		data-accent={accentColor}
	>
        <a href={url}>
            <div class="project-card-img" data-loaded="false">
                <Image transition:name=`image-${url}`
                src={projectImages[imagePath]()}
                alt={imageAlt}
                onload="this.parentElement.dataset.loaded = 'true'"
                />
            </div>
        </a>
		<div
            transition:name=`accent-${url}`
			class="project-accent rounded-[var(--radius)] absolute bottom-0 left-0 w-full h-full sm:opacity-50 md:opacity-100"
			data-accent={accentColor}
		>
		</div>
		<div
			class="post-content flex flex-col sm:h-auto md:h-full sm:w-full md:w-auto align-items-start overflow-hidden rounded-[var(--radius)] sm:pr-[var(--guide-gutter)] md:px-[var(--guide-gutter)]"
		><a href={url} class="cursor-pointer h-full flex flex-col flex-grow">
			<h1 transition:name=`title-${url}`
				class="post-sizing w-auto sm:text-xl md:text-2xl font-bold sm:leading-[1.1] tracking-tight sm:pt-[var(--guide-gutter)] md:pt-0 sm:pb-1 md:pb-0 place-content-start text-foreground/90 transition-colors duration-300"
			>
				{title}
			</h1>
            <p  transition:name=`category-${url}`
				class="post-sizing w-auto font-semibold text-xs uppercase tracking-widest pb-2 place-content-start text-[var(--project-accent)]"
			>
				{category}
			</p>
			<p transition:name=`description-${url}`
				class="post-sizing w-auto text-xs place-content-start leading-normal text-foreground/90 pb-[var(--guide-gutter)] md:flex-grow"
			>
				{description}
			</p>
            </a>
			<div class="post-sizing flex flex-row pb-[calc(var(--guide-gutter)*0.75)]">
				<div transition:name=`tags-${url}`
					class="flex w-full flex-wrap justify-start gap-1 align-self-end place-content-end"
				>
					{
						tags?.map((tag: any) => (
							<a href=`/projects/${tag.toLowerCase().replaceAll(" ", " ")}`
								class:list={[
									tag.toLowerCase().replaceAll(" ", "-"),
									"card-tag",
								]}
							>
								{tag}
							</a>
						))
					}
				</div>
                <a href={url} class="place-self-end ml-[var(--guide-gutter)] cursor-pointer">
				<svg
					class="nav-arrow h-6 w-min fill-foreground/25"
					viewBox="0 0 492.004 492.004"
				>
					<g>
						<g>
							<path
								d="M484.14,226.886L306.46,49.202c-5.072-5.072-11.832-7.856-19.04-7.856c-7.216,0-13.972,2.788-19.044,7.856l-16.132,16.136
			                    c-5.068,5.064-7.86,11.828-7.86,19.04c0,7.208,2.792,14.2,7.86,19.264L355.9,207.526H26.58C11.732,207.526,0,219.15,0,234.002
			                    v22.812c0,14.852,11.732,27.648,26.58,27.648h330.496L252.248,388.926c-5.068,5.072-7.86,11.652-7.86,18.864
			                    c0,7.204,2.792,13.88,7.86,18.948l16.132,16.084c5.072,5.072,11.828,7.836,19.044,7.836c7.208,0,13.968-2.8,19.04-7.872
			                    l177.68-177.68c5.084-5.088,7.88-11.88,7.86-19.1C492.02,238.762,489.228,231.966,484.14,226.886z"
							></path>
						</g>
					</g>
				</svg>
                </a>
			</div>
		</div>
	</div>

<style define:vars={{ image: `url("${imagePath}")` }}>
	.post {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		position: relative;
		border-radius: var(--radius);
		--project-accent: white;
	}

	.post::before {
		border-radius: inherit;
		content: "";
		height: 100%;
		left: 0px;
		opacity: 0;
		position: absolute;
		top: 0px;
		transition: opacity 500ms;
		width: 100%;
		background: radial-gradient(
			600px circle at var(--mouse-x) var(--mouse-y),
			var(--project-accent-glow) 0%,
			transparent 35%
		);
		z-index: 1;
		pointer-events: none;
	}

	.post:hover::before {
		opacity: 1;
	}

	.nav-arrow {
		transition: fill ease-in-out 200ms;
	}

	.nav-arrow:hover {
		fill: var(--project-accent);
	}

    .post-link:hover h1 {
        color: oklch(var(--css-foreground));
    }

	.project-accent {
		pointer-events: none;
	}

	.post-img {
		pointer-events: none;
		
	}

	.post-content {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		z-index: 2;
		border-radius: calc(var(--radius) - 1px);
	}

    
</style>

<script>
	function getCombinedHeight(post: HTMLElement) {
		const postSizing = post.querySelectorAll(
			".post-sizing"
		) as NodeListOf<HTMLElement>;
		let totalHeight = 0;
		postSizing.forEach((element) => {
			const style = window.getComputedStyle(element);
			const elementHeight = element.offsetHeight;
			const marginTop = parseFloat(style.marginTop);
			const marginBottom = parseFloat(style.marginBottom);
			totalHeight += elementHeight + marginTop + marginBottom;
		});

		return totalHeight;
	}

	function getCombinedHeights() {
		const allposts: NodeListOf<HTMLElement> =
			document.querySelectorAll(".post");
		allposts.forEach((post) => {
			const height = getCombinedHeight(post);
			const image = post.querySelector(".post-img") as HTMLElement;
			console.log(image);
			if (image) {
				image.style.height = `${height}px`;
			}
		});
	}

	const handleOnMouseMove = (e) => {
		const { currentTarget: target } = e;

		const rect = target.getBoundingClientRect(),
			x = e.clientX - rect.left,
			y = e.clientY - rect.top;

		target.style.setProperty("--mouse-x", `${x}px`);
		target.style.setProperty("--mouse-y", `${y}px`);
	};

	const attachEventListeners = () => {
		for (const post of document.querySelectorAll(".post")) {
			(post as HTMLElement).onmousemove = (e) => handleOnMouseMove(e);
		}

		const posts = document.querySelectorAll(
			".project-accent"
		) as NodeListOf<HTMLElement>;
		posts.forEach(function (el) {
			console.log(el.dataset.accent);
			el.style.background = `radial-gradient(circle 250px at -50% -50%, ${el.dataset.accent} -50%, transparent 200%)`;
		});

		const postsBefore = document.querySelectorAll(
			".post"
		) as NodeListOf<HTMLElement>;
		postsBefore.forEach(function (el) {
			console.log(el.dataset.accent);
			el.style.setProperty(
				"--project-accent",
				`${el.dataset.accent as string}`
			);
			el.style.setProperty(
				"--project-accent-border",
				`${el.dataset.accent as string}55`
			);
			el.style.setProperty(
				"--project-accent-glow",
				`${el.dataset.accent as string}22`
			);
		});

		getCombinedHeights();
	};

	attachEventListeners();

	document.addEventListener("astro:after-swap", () => {
		attachEventListeners();
	});

	window.addEventListener("resize", getCombinedHeights);
</script> -->
