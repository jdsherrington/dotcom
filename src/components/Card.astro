---
import { Image } from "astro:assets";

interface Props {
	title: string;
	desc: string;
	href: string;
	tags: string[];
	image: ImageMetadata;
}

const { href, title, desc, tags, image } = Astro.props;
---

<div
	class="card rounded-xl cursor-pointer border-transparent border-[1px] hover:border-foreground/20 shadow-xl shadow-transparent hover:shadow-black/15 z-10 bg-foreground/5"
>
    <Image
        src={image}
        alt={title}
        class="card-img sm:hidden md:block h-72 object-cover rounded-xl"
    />
    <div class="card-blur rounded-xl absolute bottom-0 left-0 w-full h-full"></div>
	<a
		href={href}
		class="card-content grid grid-rows-[auto_min-content_min-content] h-full w-auto cursor-pointer align-items-start pb-4 overflow-hidden rounded-xl md:absolute md:top-0 md:left-0"
	>
		<h2
			class="text-lg font-bold tracking-tight sm:pt-4 md:pt-1 pl-4 pr-4 pb-0.5 place-content-end"
		>
			{title}
			<span></span>
		</h2>
		<p class="text-sm pl-4 pr-4 pb-4 place-content-start">
			{desc}
		</p>
		<div
			class="flex flex-wrap-reverse justify-start gap-1 align-self-end place-content-end pl-4 pr-4"
		>
			{
				tags?.map((tag: any) => (
					<span
						class:list={[
							tag.toLowerCase().replaceAll(" ", "-"),
							"card-tag bg-foreground/50 text-foreground backdrop-blur-xl rounded-full pl-2.5 pr-2.5 pt-0.5 pb-0.5 text-[0.75rem] whitespace-nowrap place-self-end opacity-90",
						]}
					>
						{tag}
					</span>
				))
			}
		</div>
	</a>
</div>

<style define:vars={{ image: `url("${image}")` }}>
	.card {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		position: relative;
        border-radius: 0.75rem;
	}

	.card::before {
		border-radius: inherit;
		content: "";
		height: 100%;
		left: 0px;
		opacity: 0;
		position: absolute;
		top: 0px;
		transition: opacity 500ms;
		width: 100%;
	}

	.card::before {
		background: radial-gradient(
			600px circle at var(--mouse-x) var(--mouse-y),
			hsla(var(--foreground) / 0.08) 0%,
			transparent 35%
		);
		z-index: 3;
	}

	.card:hover::before {
		opacity: 1;
	}

	.card-img {
        object-position: 50% top;
		mask-image: linear-gradient(
			to top,
			rgba(0, 0, 0, 0) 0%,
			rgba(0, 0, 0, 1) 100%
		);
	}

	.card-content {
		transition:
			box-shadow ease-in-out 400ms,
			border-color ease-in-out 200ms;
		z-index: 2;
        border-radius: calc(0.75rem - 1px);
	}

    .card-blur {
        -webkit-backdrop-filter: blur(50px);
        backdrop-filter: blur(50px);
        -webkit-mask-image: linear-gradient(to bottom, transparent 0rem, black 10rem);
        mask-image: linear-gradient(to bottom, transparent 0rem, black 10rem);
    }

	.html {
		background-color: var(--tag-html);
		color: var(--card-light);
	}
	.css {
		background-color: var(--tag-css);
		color: var(--card-light);
	}
	.javascript {
		background-color: var(--tag-javascript);
		color: var(--card-dark);
	}
	.astro {
		background-color: var(--tag-astro);
		color: var(--card-light);
	}
	.tailwind-css {
		background-color: var(--tag-tailwind);
		color: var(--card-dark);
	}
	.react {
		background-color: var(--tag-react);
		color: var(--card-dark);
	}
	.sql {
		background-color: var(--tag-sql);
		color: var(--card-dark);
	}
	.c\# {
		background-color: var(--tag-csharp);
		color: var(--card-light);
	}
	.\.net {
		background-color: var(--tag-dotnet);
		color: var(--card-light);
	}
	.azure-cosmos-db {
		background-color: var(--tag-azure-cosmos);
		color: var(--card-light);
	}
    .angular {
		background-color: var(--tag-angular);
		color: var(--card-light);
	}
    .supabase {
		background-color: var(--tag-supabase);
		color: var(--card-dark);
	}
</style>

<script>
	const handleOnMouseMove = (e) => {
		const { currentTarget: target } = e;

		const rect = target.getBoundingClientRect(),
			x = e.clientX - rect.left,
			y = e.clientY - rect.top;

		target.style.setProperty("--mouse-x", `${x}px`);
		target.style.setProperty("--mouse-y", `${y}px`);
	};

	for (const card of document.querySelectorAll(".card")) {
		(card as HTMLElement).onmousemove = (e) => handleOnMouseMove(e);
	}
</script>
