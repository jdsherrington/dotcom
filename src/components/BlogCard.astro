---
import type { ImageMetadata } from "astro";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import { extractOKLCHColors } from "../lib/extractOKLCHColors";

import CardTag from "@/components/CardTag.astro";
import NavigationButton from "@/components/NavigationButton.astro";

interface Props {
	id: string;
	title: string;
	description: string;
	date: string;
	url: string;
	tags: string[];
	imagePath: string;
	imageAlt: string;
	wordCount?: number;
	type: string;
}

const {
	id,
	title,
	description,
	date,
	url,
	tags,
	imagePath,
	imageAlt,
	type,
	wordCount,
} = Astro.props;

const formattedDate = new Date(date).toLocaleDateString("en-AU", {
	year: "numeric",
	month: "long",
	day: "2-digit",
});

const accentPalette: any = await extractOKLCHColors(imagePath);
const accent = accentPalette[0];

let readTime = 0;
if (wordCount) {
	readTime = Math.round(wordCount / 250);
}

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/blog/posts/*.{jpeg,jpg,png,gif,webp}",
);

if (!images[imagePath])
	throw new Error(
		`"${imagePath}" does not exist in glob: "src/assets/blog/posts/*"`,
	);
---

<div
	id=`blog-post-${id}`
	transition:name=`blog-post-${id}`
	class="blog-post card group [&[data-type='featured']]:max-h-col-6 flex border-b selection:bg-[oklch(var(--accent-foreground))] selection:text-[oklch(var(--accent-background))] sm:flex-row md:flex-col [&[data-type='featured']]:flex-row [&[data-type='featured']]:border-t-0 [&[data-type='featured']]:after:w-full [&[data-type='featured']]:md:col-span-2 [&[data-type='featured']]:lg:col-span-3 [&[data-type='standard']]:border-r"
	style="--accent-foreground: from oklch(var(--accent)) var(--shade-foreground) c
			h;
		--accent-background: from oklch(var(--accent)) var(--shade-background) c
		h;
		--accent-foreground-text: from oklch(var(--accent)) calc(var(--shade-foreground)*5) calc(c*0.25) h;"
	data-accent={accent}
	data-type={type}
>
	<a
		id=`blog-post-image-${id}`
		href={url}
		transition:name=`blog-post-image-${id}`
		class="border-border-background m-gutter group/thumbnail ease-flicker in-[&[data-type='standard']]:md:h-col-2 z-1 flex h-auto flex-col self-start border transition-colors duration-200 sm:h-[calc(100%-(var(--col-gutter))*2)] sm:w-[calc(var(--col-half)-var(--col-gutter))] in-[&[data-type='standard']]:sm:w-[calc(var(--col-1)+(var(--col-gutter)*2))] md:hover:border-[oklch(var(--accent-foreground))] in-[&[data-type='standard']]:md:w-[calc(100%-(var(--col-gutter)*2))]"
		data-loaded="false"
		data-id="${id}"
	>
		<Image
			src={images[imagePath]()}
			alt={imageAlt}
			onload="this.parentElement.dataset.loaded = 'true'"
			class="w-full object-cover opacity-85 sm:h-full in-[&[data-type='featured']]:md:h-[calc(100%-var(--col-gutter))] in-[&[data-type='standard']]:md:h-[calc(var(--col-2)-var(--col-gutter))]"
		/>

		<small
			class="text-border-foreground prevent-select border-border-background text-2xs ease-flicker pointer-events-none line-clamp-1 h-[calc(var(--col-gutter))] border-t px-2 py-1 text-right font-mono tracking-widest uppercase transition-all duration-200 sm:hidden md:block md:group-hover/thumbnail:border-[oklch(var(--accent-foreground))] md:group-hover/thumbnail:bg-[oklch(var(--accent-foreground)/0.1)] md:group-hover/thumbnail:text-[oklch(var(--accent-foreground))]"
			>// {imageAlt}
		</small>
	</a>
	<div
		id=`blog-post-content-${id}`
		class="p-gutter in-[&[data-type='featured']]:sm:w-col-half in-[&[data-type='standard']]:md:pl-gutter z-1 flex h-full flex-col transition-opacity duration-300 ease-in-out group-hover:opacity-100 in-[&[data-type='featured']]:justify-center in-[&[data-type='featured']]:pl-0 sm:w-full sm:pl-0 sm:opacity-100 in-[&[data-type='standard']]:sm:pt-4 md:opacity-90 in-[&[data-type='standard']]:md:-mt-[5px] in-[&[data-type='standard']]:md:pt-0"
	>
		<div
			id=`blog-post-featured-${id}`
			class="pointer-events-none mb-4 hidden grow-1 items-end font-mono text-xs tracking-widest uppercase select-none in-[&[data-type='featured']]:flex"
		>
			<small
				class="text-border-foreground border-border-background border px-2.5 py-2"
				>Featured Post</small
			>
		</div>

		<a href={url}>
			<h1
				id=`blog-post-title-${id}`
				transition:name=`blog-post-title-${id}`
				class="sm:text-foreground/80 md:text-foreground/70 md:hover:text-foreground/80 mb-1.5 leading-7 font-[650] tracking-tight text-pretty transition-colors duration-300 ease-in-out sm:text-xl in-[&[data-type='featured']]:sm:text-2xl md:text-2xl in-[&[data-type='featured']]:lg:text-3xl in-[&[data-type='featured']]:lg:leading-9 in-[&[data-type='featured']]:lg:font-[700]"
			>
				{title}
			</h1>
		</a>

		<small
			id=`blog-post-date-${id}`
			transition:name=`blog-post-date-${id}`
			class="sm:text-foreground/60 md:text-foreground/50 mb-2 font-mono text-xs tracking-widest uppercase transition-all duration-300 ease-in-out"
		>
			// {formattedDate}
		</small>

		<p
			id=`blog-post-description-${id}`
			transition:name=`blog-post-description-${id}`
			class="text-foreground/70 mb-4 h-auto text-sm text-pretty transition-all duration-300 ease-in-out sm:hidden md:line-clamp-3"
		>
			{description}
		</p>

		<div
			id=`blog-post-tags-${id}`
			transition:name=`blog-post-tags-${id}`
			class="tags-box flex h-min w-full grow-1 flex-row flex-wrap place-content-start in-[&[data-type='standard']]:flex-grow"
		>
			{tags?.map((tag: any) => <CardTag text={tag} collection="blog" />)}
		</div>
		<div
			id=`blog-post-button-wrapper-${id}`
			class="group mt-gutter flex w-full"
		>
			<div
				id=`blog-post-decoration-${id}`
				class="before:ease-flicker ease-flicker border-border-background relative grow-1 border border-r-0 bg-[repeating-linear-gradient(45deg,var(--border-background),var(--border-background)_2px,transparent_2px,transparent_8px)] bg-clip-content transition-all duration-200 before:absolute before:inset-0 before:bg-[repeating-linear-gradient(45deg,oklch(var(--accent-foreground)),oklch(var(--accent-foreground))_2px,transparent_2px,transparent_8px)] before:opacity-0 before:transition-all before:delay-100 before:duration-200 before:content-[''] group-has-[.navigation-button:hover]:md:border-[oklch(var(--accent-foreground))] group-has-[.navigation-button:hover]:md:before:opacity-100"
			>
			</div>
			<a
				href={url}
				id=`blog-post-button-${id}`
				transition:name=`blog-post-button-${id}`
				class="navigation-button rounded-base border-border-background text-foreground/60 ease-flicker relative inline-flex w-fit cursor-pointer place-items-center gap-3 place-self-end border px-4.5 py-3 font-mono text-xs tracking-wider uppercase transition-all duration-200 hover:md:border-[oklch(var(--accent-foreground))] hover:md:bg-[oklch(var(--accent-foreground)/0.1)] hover:md:text-[oklch(var(--accent-foreground))]"
			>
				<span class="">{readTime} min read</span>
				<Icon name="ui/right-arrow" class="h-3 w-auto" />
			</a>
		</div>
	</div>
</div>

<script>
	const setPostAccents = () => {
		// Set post accents
		document.querySelectorAll<HTMLElement>(".blog-post").forEach((post) => {
			const currentTheme =
				document.documentElement.getAttribute("data-theme");
			post.style.setProperty("--accent-local", `${post.dataset.accent}`);

			if (currentTheme === "dark" || currentTheme === "light") {
				post.style.setProperty(
					"--accent",
					getComputedStyle(post).getPropertyValue("--accent-local"),
				);
			} else {
				post.style.setProperty(
					"--accent",
					getComputedStyle(document.documentElement).getPropertyValue(
						"--accent-global",
					),
				);
			}
		});
	};

	// Attach initial event listeners
	setPostAccents();
	document.addEventListener("astro:after-swap", () => {
		setPostAccents();
	});

	const setTagRows = () => {
		const tagBoxes = document.querySelectorAll(".tags-box");

		if (!tagBoxes) {
			return;
		}
		// First check applies relevant flex row classes
		tagBoxes.forEach((tagBox) => {
			const tags = tagBox.querySelectorAll(".card-tag");

			// Reset previous row classes
			tags.forEach((tag) => {
				for (let i = 0; i < 10; i++) {
					tag.classList.remove(`tag-row-${i + 1}`);
				}
			});

			if (tags.length === 0) return;

			let prevTop = tags[0].getBoundingClientRect().top;
			let currentRow = 1;

			tags.forEach((tag) => {
				const tagTop = tag.getBoundingClientRect().top;

				if (Math.abs(tagTop - prevTop) > 1) {
					currentRow++;
					prevTop = tagTop;
				}

				tag.classList.add(`tag-row-${currentRow}`);
			});
		});

		tagBoxes.forEach((tagBox: any) => {
			const tags: NodeListOf<HTMLElement> =
				tagBox.querySelectorAll(".card-tag");
			if (tags.length === 0) return;

			let rowLengths: number[] = new Array(10).fill(0);

			for (let i = 0; i < 10; i++) {
				tags.forEach((tag: HTMLElement) => {
					if (tag.classList.contains(`tag-row-${i + 1}`)) {
						rowLengths[i] += tag.clientWidth;
					}
				});
			}

			rowLengths.forEach((rowLength: number, index) => {
				const rowTags = tagBox.querySelectorAll(
					`.tag-row-${index + 1}`,
				);

				// Cancels loop if current row is empty, offsets margins on previous row
				if (rowLengths[index] === 0) {
					return;
				}

				// Clears border classes, add hover margin offsets
				rowTags.forEach((tag: any) => {
					tag.classList.remove("border-l");
					tag.classList.remove("border-r");
					tag.classList.remove("border-b");
					tag.classList.remove("border-t");

					// tag.classList.add("md:hover:-mb-[1px]");
					// tag.classList.add("md:hover:-mr-[1px]");
					// tag.classList.add("md:hover:-mt-[1px]");
				});

				// Sets left borders on all tags in row, and right border on the last row tag
				rowTags.forEach(
					(tag: any, i: number, arr: NodeListOf<HTMLElement>) => {
						tag.classList.add("border-l");
						if (i === arr.length - 1) {
							tag.classList.add("border-r");
							tag.classList.remove("md:hover:-mr-[1px]");
						}
					},
				);

				// Sets top border on first row
				if (index == 0) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-t");
					});
				}

				// Sets bottom border if current row is longer than next row
				if (rowLengths[index] >= rowLengths[index + 1]) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-b");
						tag.classList.remove("md:hover:-mb-[1px]");
					});
				}

				// Sets top border if current row is longer than previous row
				if (rowLengths[index] > rowLengths[index - 1]) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-t");
						tag.classList.remove("md:hover:-mt-[1px]");
					});
				}

				// Sets bottom border if current row is final row
				if (rowLengths[index + 1] === 0) {
					rowTags.forEach((tag: any) => {
						tag.classList.add("border-b");
						tag.classList.remove("md:hover:-mb-[1px]");
					});
				}
			});
		});
	};

	setTagRows();
	document.addEventListener("astro:after-swap", () => {
		setTagRows();
	});
	window.addEventListener("resize", () => {
		setTagRows();
	});
</script>
