---
import "@/styles/global.css";

import Background from "@/components/Background.astro";
import Header from "@/components/Header.astro";
import MobileNav from "@/components/MobileNav.astro";
import Footer from "@/components/Footer.astro";
import { ClientRouter } from "astro:transitions";

import "overlayscrollbars/overlayscrollbars.css";
import {
	OverlayScrollbars,
	ScrollbarsHidingPlugin,
	SizeObserverPlugin,
	ClickScrollPlugin,
} from "overlayscrollbars";

const { pageTitle, pageDesc } = Astro.props;
---

<html lang="en" data-overlayscrollbars-initialize>
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="generator" content={Astro.generator} />
		<title>{pageTitle}</title>

		<meta name="title" content={pageTitle} />
		<meta name="description" content={pageDesc} />

		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<link
			rel="preload"
			href="/fonts/InterVariable.woff2"
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>
		<link
			rel="preload"
			href="/fonts/InterVariable-Italic.woff2"
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>

		<link
			rel="preload"
			href="/fonts/GeistMono.woff2"
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>

		<ClientRouter />
	</head>

	<body data-overlayscrollbars-initialize class="flex flex-col items-center">
		<Background />
		<div
			id="top-marker"
			class="pointer-events-none absolute top-0 left-0 h-[1px] w-[1px] bg-transparent"
		>
		</div>

		<Header pageTitle={pageTitle} />	
		<main class="self-center">
			<slot />
		</main>
		<MobileNav />
	</body>
</html>

<!-- Open & Close Menus -->
<script>
	document.addEventListener("click", (e) => {
		const target = e.target as HTMLElement;
		console.log(
			document.querySelector(".menu-btn.open") &&
				!target.closest(".menu"),
		);

		// Open menu if menu button clicked
		if (target.closest(".menu-btn") && !target.closest(".menu")) {
			const menuBtn = target.closest(".menu-btn");
			const menu = menuBtn?.querySelector(".menu");

			if (menuBtn && menu) {
				menuBtn.classList.toggle("open");
				menu.classList.toggle("open");
			}

			e.stopPropagation();
		}

		// Close menu when clicking outside
		else if (
			document.querySelector(".menu-btn.open") &&
			!target.closest(".menu")
		) {
			document.querySelectorAll(".menu-btn.open").forEach((menuBtn) => {
				menuBtn.classList.remove("open");
				const menu = menuBtn.querySelector(".menu");
				if (menu) {
					menu.classList.remove("open");
				}
			});
		}
	});
</script>

<!-- Track Mouse Position -->
<script>
	const trackMouse = () => {
		let ticking = false;
		let lastX = 0,
			lastY = 0;

		const elements: NodeListOf<HTMLElement> = document.querySelectorAll(
			".card, pre, blockquote, .theme-drawer, .menu-btn, .navigation-button, .border-shimmer-passive",
		);

		// Function to update positions
		const updatePositions = () => {
			requestAnimationFrame(() => {
				document.documentElement.style.setProperty(
					"--mouse-x",
					`${lastX}px`,
				);
				document.documentElement.style.setProperty(
					"--mouse-y",
					`${lastY}px`,
				);
				elements.forEach((element) => {
					const rect = element.getBoundingClientRect();
					element.style.setProperty("--x", `${lastX - rect.left}px`);
					element.style.setProperty("--y", `${lastY - rect.top}px`);
				});
				ticking = false;
			});
		};

		// Mouse move event
		document.addEventListener("mousemove", (e) => {
			lastX = e.clientX;
			lastY = e.clientY;

			if (!ticking) {
				ticking = true;
				updatePositions();
			}
		});

		// Scroll event
		document.addEventListener("scroll", () => {
			// Use the last known mouse position but recalculate element positions
			if (!ticking) {
				ticking = true;
				updatePositions();
			}
		});
	};

	trackMouse();
	document.addEventListener("astro:after-swap", () => {
		trackMouse();
	});
</script>

<!-- Scrollbars -->
<script>
	import "overlayscrollbars/overlayscrollbars.css";
	import {
		OverlayScrollbars,
		ScrollbarsHidingPlugin,
		SizeObserverPlugin,
		ClickScrollPlugin,
	} from "overlayscrollbars";

	const initScrollbar = () => {
		OverlayScrollbars(document.querySelector("body"), {});
	};

	initScrollbar();

	document.addEventListener("astro:after-swap", initScrollbar);
</script>

<!-- Theme Switching -->
<script astro-data-rerun>
	function loadTheme(document) {
		let currentTheme = localStorage.getItem("theme");

		if (!currentTheme) {
			localStorage.setItem("theme", "system");
			currentTheme = "system";
		}

		let appliedTheme = currentTheme;

		if (appliedTheme == "system") {
			appliedTheme = window.matchMedia("(prefers-color-scheme: light)")
				.matches
				? "light"
				: "dark";
		}

		document.documentElement.setAttribute("data-theme", appliedTheme);
		document.documentElement.className = "";
		let themeType = appliedTheme;
		switch (themeType) {
			case "source":
				themeType = "dark";
				break;
			case "carbon":
				themeType = "dark";
				break;
			case "golden":
				themeType = "light";
				break;
			case "spring":
				themeType = "light";
				break;
		}
		document.documentElement.classList.add(`theme-${themeType}`);

		document.querySelectorAll(".theme-drawer li").forEach((button) => {
			button.classList.remove("active");
			if (button.classList.contains(currentTheme))
				button.classList.add("active");
		});

		const posts = document.querySelectorAll(".blog-post");
		const page = document.querySelector(".blog-page");
		const html = document.querySelector("html");

		html.style.setProperty(
			"--accent",
			getComputedStyle(document.documentElement).getPropertyValue(
				"--accent-global",
			),
		);

		if (page) {
			if (appliedTheme === "dark" || appliedTheme === "light") {
				html.style.setProperty(
					"--accent",
					getComputedStyle(page).getPropertyValue("--accent-local"),
				);
				page.style.setProperty(
					"--accent",
					getComputedStyle(page).getPropertyValue("--accent-local"),
				);
			}
		}

		if (posts) {
			posts.forEach((post) => {
				if (appliedTheme === "dark" || appliedTheme === "light") {
					console.log("POST");
					post.style.setProperty(
						"--accent",
						getComputedStyle(post).getPropertyValue(
							"--accent-local",
						),
					);
				} else {
					post.style.setProperty(
						"--accent",
						getComputedStyle(post).getPropertyValue(
							"--accent-global",
						),
					);
				}
			});
		}
	}

	function createToggles() {
		function setThemeFromButton(targetDocument, targetButton) {
			const newTheme = targetButton.getAttribute("class").split(" ")[0];
			localStorage.setItem("theme", newTheme);
			loadTheme(targetDocument);
		}

		document.querySelectorAll(".theme-drawer li").forEach((button) => {
			button.removeEventListener("click", () =>
				setThemeFromButton(document, button),
			);

			button.addEventListener("click", () =>
				setThemeFromButton(document, button),
			);
		});
	}

	document.addEventListener("astro:before-swap", (ev) => {
		loadTheme(ev.newDocument);
	});
	document.addEventListener("astro:page-load", loadTheme(document));

	createToggles();
	document.addEventListener("astro:after-swap", createToggles);
</script>

<!-- Add "On Scroll" Logic -->
<script is:inline>
	const nav = document.querySelector("nav");
	const setScrolledNav = () =>
		nav?.classList.toggle("scrolled", window.scrollY > 40);

	document.addEventListener("scroll", setScrolledNav);
	document.addEventListener("astro:before-swap", setScrolledNav);
</script>

<script is:inline>
	const setScrolledBody = () => {
		let body = document.querySelector("body");
		setTimeout(() => {
			body?.classList.toggle("scrolled", window.scrollY > 350);
		}, 150);
	};

	document.removeEventListener("scroll", setScrolledBody);
	document.removeEventListener("astro:before-swap", setScrolledBody);

	document.addEventListener("scroll", setScrolledBody);
	document.addEventListener("astro:before-swap", setScrolledBody);
</script>

<!-- Display Images When Loaded -->
<script>
	document.addEventListener("astro:page-load", () => {
		document.querySelectorAll("img").forEach((image) => {
			image.onload = () => image.classList.add("loaded");
			if (image.complete) image.classList.add("loaded");
		});
	});
</script>

<!-- Attach Skeletons To Loading Images -->
<script data-astro-rerun>
	document.querySelectorAll('div[data-loaded="false"]').forEach((element) => {
		element.classList.add("skeleton");

		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					element.classList.remove("skeleton");
					observer.unobserve(element);
				}
			});
		});

		observer.observe(element);
	});
</script>
