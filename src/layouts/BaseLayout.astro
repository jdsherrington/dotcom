---
import "@/styles/global.css";

import Header from "@/components/Header.astro";
import NavFooter from "@/components/NavFooter.astro";
import Footer from "@/components/Footer.astro";
import { ViewTransitions } from "astro:transitions";

const { pageTitle, pageDesc } = Astro.props;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{pageTitle}</title>

		<meta name="title" content={pageTitle} />
		<meta name="description" content={pageDesc} />

		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<link
			rel="preload"
			href="/fonts/Fluent-Regular.woff2"
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>

		<link
			rel="preload"
			href="/fonts/Fluent-Bold.woff2"
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>

		<link
			rel="preload"
			href="/fonts/JetBrainsMonoVariable.woff2"
			as="font"
			type="font/woff2"
			crossorigin="anonymous"
		/>

		<ViewTransitions />
	</head>

	<body>
		<Header />
		<main>
			<slot />
		</main>
		<NavFooter />
		<Footer />
	</body>
</html>

<style>
	body {
		@apply flex flex-col;
	}

	main {
		@apply self-center;
	}
</style>

<!-- Theme Switching -->
<script is:inline>
	(function setToggles() {
		const toggleTheme = () => {
			const theme =
				localStorage.getItem("theme") === "light" ? "dark" : "light";
			localStorage.setItem("theme", theme);
			document.documentElement.setAttribute("data-theme", theme);
		};

		document.querySelectorAll(".theme-toggle").forEach((btn) => {
			btn.removeEventListener("click", toggleTheme);
			btn.addEventListener("click", toggleTheme);
		});

		document.addEventListener("astro:after-swap", () => {
			document.documentElement.setAttribute(
				"data-theme",
				localStorage.getItem("theme")
			);
		});
	})();

	const applyTheme = (theme, document) =>
		document.documentElement.setAttribute("data-theme", theme);

	(function updateTheme() {
		const theme =
			localStorage.getItem("theme") ||
			(window.matchMedia("(prefers-color-scheme: light)").matches
				? "light"
				: "dark");
		localStorage.setItem("theme", theme);
		applyTheme(theme, document);
	})();

	document.addEventListener("astro:before-swap", (ev) => {
		applyTheme(localStorage.getItem("theme"), ev.newDocument);
	});
</script>

<!-- Add "On Scroll" Logic -->
<script is:inline>
	const header = document.querySelector("header");
	const setHeaderScrolled = () =>
		setTimeout(() => {
			header?.classList.toggle("scrolled", window.scrollY > 10);
		}, 150);

	document.addEventListener("scroll", setHeaderScrolled);
	document.addEventListener("astro:before-swap", setHeaderScrolled);
</script>

<script is:inline>
	const setBodyScrolled = () => {
		let body = document.querySelector("body");
		setTimeout(() => {
			body?.classList.toggle("scrolled", window.scrollY > 300);
		}, 150);
	};

	document.removeEventListener("astro:scroll", setBodyScrolled);
	document.removeEventListener("astro:before-swap", setBodyScrolled);

	document.addEventListener("scroll", setBodyScrolled);
	document.addEventListener("astro:before-swap", setBodyScrolled);
</script>

<!-- Display Images When Loaded -->
<script>
	document.addEventListener("astro:page-load", () => {
		document.querySelectorAll("img").forEach((image) => {
			image.onload = () => image.classList.add("loaded");
			if (image.complete) image.classList.add("loaded");
		});
	});
</script>

<!-- Attach Skeletons To Loading Images -->
<script data-astro-rerun>
	document.querySelectorAll('div[data-loaded="false"]').forEach((element) => {
		element.classList.add("skeleton");

		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					element.classList.remove("skeleton");
					observer.unobserve(element);
				}
			});
		});

		observer.observe(element);
	});
</script>
