---
import BaseLayout from "../layouts/BaseLayout.astro";

import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import { slide } from 'astro:transitions';

const { frontmatter } = Astro.props;

const formattedDate = new Date(frontmatter.date).toLocaleDateString("en-AU", {
	year: "numeric",
	month: "short",
	day: "2-digit",
});

const readTime = Math.round(frontmatter.wordCount / 250);

const images = import.meta.glob<{ default: ImageMetadata }>(
	"/src/assets/blog/posts/*.{jpeg,jpg,png,gif,webp}"
);

if (!images[frontmatter.imagePath]) {
	throw new Error(
		`"${frontmatter.imagePath}" does not exist in glob: "src/assets/blog/posts/*"`
	);
}


const rawContent = Astro.slots.has("default") ? await Astro.slots.render("default") : "";

const headingRegex = /<h([1-2])[^>]*>(.*?)<\/h\1>/gi;
const headings = [];
let match;

while ((match = headingRegex.exec(rawContent)) !== null) {
  const headingLevel = `${match[1]}`;
  const headingText = match[2].trim();
  headings.push([headingLevel, headingText]);
}

---

<BaseLayout pageTitle={frontmatter.title}>
	<div class="blog-page" data-accent={frontmatter.accentColor}>
        <div transition:name=`image${frontmatter.url}` class="blog-page-img">
                <Image 
                src={images[frontmatter.imagePath]()}
                alt={frontmatter.imageAlt}/>
        </div>
        <div class="blog-page-content">
            <div class="blog-page-panel">
                <div class="blog-page-details" transition:name=`container${frontmatter.url}`>
                    <div 
                    class="blog-page-accent"
                    data-accent={frontmatter.accentColor}>
                    </div>
                    <div class="blog-page-details-img">
                        <Image 
                        src={images[frontmatter.imagePath]()}
                        alt={frontmatter.imageAlt}/>
                    </div>
                    <h1 transition:name=`title-${frontmatter.url}` class="blog-page-title">
                            {frontmatter.title}
                    </h1>
                    <p  transition:name=`date-${frontmatter.url}` class="blog-page-date">
                        {formattedDate} â€” {readTime} min read
                    </p>
                    <div transition:name=`tags-${frontmatter.url}` class="blog-page-tags"
                    >
                        {
                            frontmatter.tags?.map((tag: any) => (
                                <a href=`/blog/tagged/${tag.toLowerCase().replaceAll(" ", " ")}`
                                    class:list={[
                                        tag.toLowerCase().replaceAll(" ", "-"),
                                        "blog-post-tag",
                                    ]}
                                >
                                    {tag}
                                </a>
                            ))
                        }
                    </div>
                </div>
                <div class="blog-page-toc">
                    <ul>
                        {
                            headings.map(([level, text]) => (
                                <a href={`#${text.replace(/\s+/g, "-").toLowerCase()}`}>
                                    <li class={`toc-${level}`}>
                                        {text}
                                    </li>
                                </a>
                            ))
                        }
                    </ul>
                </div>
            </div>
            <div class="post-markdown">
                <slot />
            </div>
        </div>
        <a href="javascript:void(0);" onclick="history.back()">
                <svg
                    class="blog-page-nav-arrow"
                    viewBox="0 0 492 492"
                >
                    <g>
                        <g>
                            <path
                                d="M464.344,207.418l0.768,0.168H135.888l103.496-103.724c5.068-5.064,7.848-11.924,7.848-19.124
                c0-7.2-2.78-14.012-7.848-19.088L223.28,49.538c-5.064-5.064-11.812-7.864-19.008-7.864c-7.2,0-13.952,2.78-19.016,7.844
                L7.844,226.914C2.76,231.998-0.02,238.77,0,245.974c-0.02,7.244,2.76,14.02,7.844,19.096l177.412,177.412
                c5.064,5.06,11.812,7.844,19.016,7.844c7.196,0,13.944-2.788,19.008-7.844l16.104-16.112c5.068-5.056,7.848-11.808,7.848-19.008
                c0-7.196-2.78-13.592-7.848-18.652L134.72,284.406h329.992c14.828,0,27.288-12.78,27.288-27.6v-22.788
                C492,219.198,479.172,207.418,464.344,207.418z"
                            ></path>
                        </g>
                    </g>
                </svg>
            </a>
	</div>
    
</BaseLayout>

<script data-astro-rerun>
	const handleOnMouseMove = (e) => {
		const { currentTarget: target } = e;

		const rect = target.getBoundingClientRect(),
			x = e.clientX - rect.left,
			y = e.clientY - rect.top;

		target.style.setProperty("--mouse-x", `${x}px`);
		target.style.setProperty("--mouse-y", `${y}px`);
	};

	const attachEventListeners = () => {
		for (const post of document.querySelectorAll(".blog-page-details")) {
			(post).onmousemove = (e) => handleOnMouseMove(e);
		}

		const pageAccent = document.querySelector(
			".blog-page-accent"
		);
			pageAccent.style.background = `radial-gradient(circle 250px at 50% 200%, ${pageAccent.dataset.accent} -50%, transparent 150%)`;

		const page = document.querySelector(
			".blog-page"
		);
        const html = document.querySelector(
			"html"
		);
		page.style.setProperty(
				"--page-accent",
				`${page.dataset.accent}`
                // 100%
		);
        html.style.setProperty(
				"--page-accent",
				`${page.dataset.accent}`
                // 100%
		);
        html.style.setProperty(
				"--page-accent-gradient",
				`${page.dataset.accent}`
                // 100%
		);
	};

	attachEventListeners();

	document.addEventListener("astro:after-swap", () => {
		attachEventListeners();
	});

    // console.log("Script working")
    // function attachEventListeners() {
	// 	const post = document.querySelector(
	// 		".page-accent"
	// 	) as HTMLElement;
    //     if (post) {
    //         console.log(post.dataset.accent);
	// 	post.style.background = `radial-gradient(circle 200px at 100% 450%, ${post.dataset.accent} 0%, transparent 475%)`;
    //     }
	// };

	// attachEventListeners();

	// document.addEventListener("astro:after-swap", attachEventListeners);
    // document.addEventListener("DOMContentLoaded", attachEventListeners);
</script>